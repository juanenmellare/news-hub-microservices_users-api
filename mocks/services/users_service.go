// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "news-hub-microservices_users-api/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid"
)

// UsersService is an autogenerated mock type for the UsersService type
type UsersService struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: email, password
func (_m *UsersService) Authenticate(email string, password string) *models.User {
	ret := _m.Called(email, password)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(string, string) *models.User); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	return r0
}

// Create provides a mock function with given fields: firstName, lastName, email, password
func (_m *UsersService) Create(firstName string, lastName string, email string, password string) uuid.UUID {
	ret := _m.Called(firstName, lastName, email, password)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(string, string, string, string) uuid.UUID); ok {
		r0 = rf(firstName, lastName, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

type mockConstructorTestingTNewUsersService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsersService creates a new instance of UsersService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsersService(t mockConstructorTestingTNewUsersService) *UsersService {
	mock := &UsersService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
